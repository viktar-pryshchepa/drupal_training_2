<?php
/**
 * Implements hook_menu
 */
function mybatch_menu() {
  $menu['training/batch'] = array(
    'title' => t('Batch training'),
    'page callback' => 'mybatch_landing_page',
    'menu_name' => 'navigation',
    'expanded' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'mybatch_everyone_access',
  );
  $menu['training/batch/download/%file'] = array(
    'page callback' => 'mybatch_download_page',
    'access callback' => 'mybatch_everyone_access',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  );
  $menu['training/batch/upload/%ctools_js'] = array(
    'title' => t('File upload'),
    'access callback' => 'mybatch_file_upload_access',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'page callback' => 'mybatch_upload_page',
  );
  $menu['training/batch/batch'] = array(
    'title' => t('Batch'),
    'page callback' => 'mybatch_batch_page',
    'menu_name' => 'navigation',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'mybatch_everyone_access',
  );
  return $menu;
}

/**
 * Implements download page callback
 * @param $file
 */
function mybatch_download_page($file) {
  global $user;
  if($user->uid === 0) {
    return drupal_access_denied();
  }
  $files = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uid', $user->uid)
    ->execute()->fetchAllAssoc('fid', PDO::FETCH_ASSOC);
  if(count($files) === 0) {
    return drupal_access_denied();
  }
  if(isset($file)) {
    file_transfer($file->uri, array(
        'Content-disposition' => 'attachment; filename=' . $file->filename,
        'Content-Type' => 'application/octet-stream',
        'Content-Length' => filesize($file->uri),
      )
    );
  } else {
    return drupal_access_denied();
  }
}
/**
 * Implements main batch page callback
 * @return string
 */
function mybatch_landing_page() {
  global $user;
  drupal_add_css(drupal_get_path('module', 'mybatch') . '/mybatch.css', array(
      'type' => 'file',
      'group' => CSS_DEFAULT,
      'every_page' => TRUE,
    )
  );
  drupal_add_js(array('uid' => $user->uid, ), 'setting');
  drupal_add_js('jQuery(document).ready(function () {
      var uid = Drupal.settings.uid;
      jQuery(".user-row-" + uid).css("background-color", "#E2FFE2");
    });', 'inline');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_modal_add_js();
  $html = '';
  $html .= ctools_modal_text_button(t('Upload file'), 'training/batch/upload/ajax', t('Upload file dialog'));
  $results = db_select('file_managed', 'fm')->fields('fm')->extend('PagerDefault')->limit(10)->execute();
  $rows = array();
  $header = array('fid', array('data' => 'uid', 'class' => 'mybatch-hidden'), 'status', 'uri', 'link');
  foreach ($results as $row) {
    $rows[] = array(
      'data' => array(
        $row->fid,
        array('data' => $row->uid, 'class' => 'mybatch-hidden'),
        $row->status,
        $row->uri,
        l($row->filename, 'training/batch/download/' . $row->fid),
      ),
      'class' => array('user-row-' . $row->uid)
    );
  }
  $vars = array('header' => $header, 'rows' => $rows);
  $table = theme('table', $vars).theme('pager');
  $html .= $table;
  return $html;
}
/**
 * Implements hook_form
 * @param $form
 * @param $form_state
 * @return mixed
 */
function mybatch_upload_form($form, &$form_state) {
  $form_state['ajax'] = TRUE;
  $form['file'] = array (
    '#title' => t('Upload file'),
    '#type' => 'managed_file',
    '#upload_location' => 'public://files',
  );
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}
/**
 * Implements upload page callback
 * @param $js
 * @return array|mixed
 */
function mybatch_upload_page($js) {
  if (!$js) {
    $form = drupal_get_form('mybatch_upload_form', FALSE);
    return $form;
  }
  ctools_include('modal');
  ctools_include('ajax');
  $form_state = array(
    'title' => t('Upload'),
    'ajax' => TRUE,
  );
  $output = ctools_modal_form_wrapper('mybatch_upload_form', $form_state);
  if (!empty($form_state['executed'])) {
    drupal_set_message(t('Upload complete.'), 'status');
    $comm = array(ctools_ajax_command_redirect('training/batch'),);
    print ajax_render($comm);
    exit;
  }
  print (ajax_render($output));
  exit;
}

/**
 * Implements submit action
 * @param $form
 * @param $form_state
 */
function mybatch_upload_form_submit(&$form, &$form_state)
{
  $fid = $form_state['values']['file'];
  if($fid) {
    $file = file_load($fid);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }
  $form_state['redirect'] = 'training/batch';
}
/**
 * Access callbacks
 */
function mybatch_file_upload_access() {
  global $user;
  if($user->uid > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
function mybatch_everyone_access() {
  return TRUE;
}

/*
 * I just created View via admin area(UI). Then exported code and made come changes.
 */
function _mybatch_view_creator(){
  $view = views_new_view();
  $view->name = 'mybatch_currency';
  $view->description = '';
  $view->tag = 'default';
  $view->base_table = 'mybatch_table';
  $view->human_name = t('Currencies');
  $view->core = 7;
  $view->api_version = '3.0';
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
  /* Display: Master */
  $handler = $view->new_display('default', 'Master', 'default');
  $handler->display->display_options['title'] = 'Currencies';
  $handler->display->display_options['use_more_always'] = FALSE;
  $handler->display->display_options['access']['type'] = 'none';
  $handler->display->display_options['cache']['type'] = 'none';
  $handler->display->display_options['query']['type'] = 'views_query';
  $handler->display->display_options['exposed_form']['type'] = 'basic';
  $handler->display->display_options['pager']['type'] = 'full';
  $handler->display->display_options['pager']['options']['items_per_page'] = '10';
  $handler->display->display_options['style_plugin'] = 'table';
  /* Field: Currencies: Id */
  $handler->display->display_options['fields']['id']['id'] = 'id';
  $handler->display->display_options['fields']['id']['table'] = 'mybatch_table';
  $handler->display->display_options['fields']['id']['field'] = 'id';
  /* Field: Currencies: Charcode */
  $handler->display->display_options['fields']['charcode']['id'] = 'charcode';
  $handler->display->display_options['fields']['charcode']['table'] = 'mybatch_table';
  $handler->display->display_options['fields']['charcode']['field'] = 'charcode';
  /* Field: Currencies: Name */
  $handler->display->display_options['fields']['name']['id'] = 'name';
  $handler->display->display_options['fields']['name']['table'] = 'mybatch_table';
  $handler->display->display_options['fields']['name']['field'] = 'name';
  /* Field: Currencies: Rate */
  $handler->display->display_options['fields']['rate']['id'] = 'rate';
  $handler->display->display_options['fields']['rate']['table'] = 'mybatch_table';
  $handler->display->display_options['fields']['rate']['field'] = 'rate';
  /* Display: Page */
  $handler = $view->new_display('page', 'Page', 'page');
  $handler->display->display_options['path'] = 'my-currency';
  return $view->execute_display('page', array());
}

/**
 * Implements batch page callback
 * @return string
 */
function mybatch_batch_page() {
  $view = _mybatch_view_creator();
  $form = drupal_get_form('mybatch_batch_form');
  $return = render($view) . render($form);
  return $return;
}
/**
 * Implements hook_form. Run batch form.
 * @param $form
 * @param $form_state
 * @return mixed
 */
function mybatch_batch_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );
  return $form;
}
/**
 * Implements submit function for batch form.
 * @param $form
 * @param $form_state
 */
function mybatch_batch_form_submit($form, &$form_state) {
  $operations[] = array('_mybatch_batch_callback', array());
  $batch = array(
    'operations' => $operations,
    'finished' => '_mybatch_batch_finished',
    'title' => t('Currencies update'),
  );
  batch_set($batch);
}
/**
 * Helper function for batch operation.
 * @param $context
 */
function _mybatch_batch_callback(&$context) {
  $xml = _mybatch_get_currencies_xml();
  $results_and_count = _currencies_to_db($xml);
  $context['results'] = $results_and_count['results'];
  $context['message'] = 'Updated ' . $results_and_count['count'];
}
/**
 * Get Xml helper function.
 * @return SimpleXMLElement
 */
function _mybatch_get_currencies_xml() {
  $url = variable_get('currencies_xml_url', 'http://www.nbrb.by/Services/XmlExRates.aspx');
  $xml = simplexml_load_string(file_get_contents($url));
  return $xml;
}
/**
 * Helper function. Works with db.
 * @param $xml
 * @return array
 */
function _currencies_to_db($xml) {
  $count = 0;
  $results = array();
  foreach($xml as $currency)
  {
    $select = db_select('mybatch_table', 'tbl')
      ->fields('tbl', array())
      ->condition('tbl.charcode',(string)$currency->CharCode)
      ->execute()->fetchAllAssoc('id');
    if(count($select) > 0) {
      db_update('mybatch_table')
        ->fields(array(
          'numcode' => (string)$currency->NumCode,
          'charcode' => (string)$currency->CharCode,
          'name' => (string)$currency->Name,
          'rate' => (string)$currency->Rate,
          'scale' => (string)$currency->Scale,
        ))
        ->condition('charcode', (string)$currency->CharCode)
        ->execute();
    }
    else {
      db_insert('mybatch_table')
        ->fields(array(
          'numcode' => (string)$currency->NumCode,
          'charcode' => (string)$currency->CharCode,
          'name' => (string)$currency->Name,
          'rate' => (string)$currency->Rate,
          'scale' => (string)$currency->Scale,
        ))
        ->execute();
    }
    $results[] = (string)$currency->Name;
    $count++;
  }
  return array('results' => $results, 'count' => $count);
}
/**
 * Helper function. Batch finish results message.
 * @param $success
 * @param $results
 * @param $operations
 */
function _mybatch_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Updated') . count($results) . t(' Currencies:') . theme('item_list', array('items' => $results)));
  }
  else {
    drupal_set_message(t('Error'), 'error');
  }
}
/**
 * Implements hook_views_api.
 * @return array
 */
function mybatch_views_api() {
  return array(
    'api' => 3,
  );
}